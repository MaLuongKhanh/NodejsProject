const supportHistoryRepo = require('../repositories/SupportHistoryRepository');
const nodemailer = require('nodemailer');
require('dotenv').config();

class SupportOrdersService {
    async getAllOrders() {
        return await supportHistoryRepo.findAll();
    }

    async updateStatus(id, status, technicianMssv) {
        const order = await supportHistoryRepo.findById(id);
        if (!order) throw new Error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu');

        if (status === 'ti·∫øp nh·∫≠n' || status === 't·ª´ ch·ªëi') {
            order.mssv = technicianMssv;
        }

        order.trangthai = status;
        const updatedOrder = await supportHistoryRepo.update(id, order);

        let message = 'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng';

        // G·ª≠i email khi tr·∫°ng th√°i l√† "b√†n giao m√°y"
        if (status === 'b√†n giao m√°y') {
            if (order.email) {
                await this.sendCompletionEmail(order);
                message =
                    'C·∫≠p nh·∫≠t tr·∫°ng th√°i v√† g·ª≠i email th√¥ng b√°o th√†nh c√¥ng';
            } else {
                message =
                    'C·∫≠p nh·∫≠t tr·∫°ng th√°i th√†nh c√¥ng (kh√¥ng c√≥ email ƒë·ªÉ g·ª≠i th√¥ng b√°o)';
            }
        }

        return {
            data: updatedOrder,
            message: message,
        };
    }

    async updateOrder(id, data, technicianMssv) {
        const order = await supportHistoryRepo.findById(id);
        if (!order) throw new Error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu');
        if (order.mssv !== technicianMssv) {
            throw new Error('Kh√¥ng c√≥ quy·ªÅn ch·ªânh s·ª≠a');
        }
        return await supportHistoryRepo.update(id, data);
    }

    async deleteOrder(id, technicianMssv, role) {
        const order = await supportHistoryRepo.findById(id);
        if (!order) throw new Error('Kh√¥ng t√¨m th·∫•y y√™u c·∫ßu');
        if (order.mssv !== technicianMssv && role !== 'admin') {
            throw new Error('Kh√¥ng c√≥ quy·ªÅn x√≥a');
        }
        return await supportHistoryRepo.delete(id);
    }

    async sendCompletionEmail(order) {
        try {
            const transporter = nodemailer.createTransport({
                service: 'gmail',
                auth: {
                    user: process.env.EMAIL_USER,
                    pass: process.env.EMAIL_APP_PASSWORD,
                },
            });

            await transporter.sendMail({
                from: `"IT Center üë®‚Äçüíª" <${process.env.EMAIL_USER}>`,
                to: order.email,
                subject: 'Th√¥ng b√°o ho√†n th√†nh y√™u c·∫ßu h·ªó tr·ª£',
                html: `
                    <div style="background-color: #f6f6f6; padding: 20px;">
                        <div style="background-color: #fff; padding: 20px; border-radius: 5px;">
                            <h2 style="color: #333;">Th√¥ng b√°o ho√†n th√†nh y√™u c·∫ßu</h2>
                            <p>Xin ch√†o ${order.hoten},</p>
                            <p>Y√™u c·∫ßu h·ªó tr·ª£ c·ªßa b·∫°n ƒë√£ ƒë∆∞·ª£c ho√†n th√†nh:</p>
                            <ul>
                                <li>T√™n m√°y: ${order.tenmay}</li>
                                <li>Lo·∫°i h·ªó tr·ª£: ${order.loaihotro}</li>
                                <li>Ng√†y g·ª≠i: ${new Date(order.ngaygui).toLocaleDateString('vi-VN')}</li>
                            </ul>
                            <p>Vui l√≤ng ki·ªÉm tra v√† ph·∫£n h·ªìi n·∫øu c·∫ßn th√™m h·ªó tr·ª£.</p>
                            <p>Tr√¢n tr·ªçng,</p>
                            <p>IT Center</p>
                        </div>
                    </div>
                `,
            });

            return true;
        } catch (error) {
            console.error('Email error:', error);
            throw new Error('L·ªói khi g·ª≠i email th√¥ng b√°o');
        }
    }
}

module.exports = new SupportOrdersService();
